// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  username        String           @unique @db.VarChar(35)
  description     String?          @db.VarChar(200)
  email           String           @unique
  gender          Gender
  status          Boolean          @default(false)
  password        String
  country         Country?         @relation(fields: [countryId], references: [id])
  role            Role             @default(USER)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  recommendations Recommendation[]
  surveys         Survey[]
  comments        Comment[]
  likeComments    LikeComment[]
  votes           Vote[]
  options         Option[]
  followers       Follow[]         @relation("follower")
  following       Follow[]         @relation("following")
  countryId       Int?
  UserCategory    UserCategory[]
}

model Survey {
  id              Int              @id @default(autoincrement())
  title           String           @db.VarChar(100)
  user            User             @relation(fields: [userId], references: [id])
  userId          Int
  recommendations Recommendation[]
  options         Option[]
  comments        Comment[]
  category        Category         @relation(fields: [categoryId], references: [id])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  state           State
  categoryId      Int
}

model Comment {
  id        Int           @id @default(autoincrement())
  comment   String        @db.Text
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  survey    Survey        @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  surveyId  Int
  likes     LikeComment[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Option {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(75)
  votes     Vote[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  survey    Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  surveyId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id           Int            @id @default(autoincrement())
  category     String         @unique
  surveys      Survey[]
  isSelect     Boolean        @default(true)
  iconCategory String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  UserCategory UserCategory[]
}

model Country {
  id        Int      @id @default(autoincrement())
  country   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model UserCategory {
  userId     Int
  categoryId Int
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([userId, categoryId])
}

model Recommendation {
  surveyId Int
  userId   Int
  User     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  @@id([surveyId, userId])
}

model LikeComment {
  commentId Int
  userId    Int
  User      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([commentId, userId])
}

model Vote {
  optionId Int
  userId   Int
  User     User   @relation(fields: [userId], references: [id])
  Option   Option @relation(fields: [optionId], references: [id])

  @@id([optionId, userId])
}

model Follow {
  follower    User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  Int
  following   User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId Int

  @@id([followerId, followingId])
  @@unique([followerId, followingId])
}

enum Gender {
  FEMALE
  MALE
}

enum Role {
  ADMIN
  USER
}

enum State {
  PUBLIC
  PRIVATE
}
